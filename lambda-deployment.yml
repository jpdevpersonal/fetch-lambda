AWSTemplateFormatVersion: '2010-09-09'
Description: A simple Lambda function that Logs a sns event to a cloudwatch log group.

Resources:
  # -------------------------------
  # IAM Role for Lambda Execution
  # -------------------------------
  MyLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: MyLambdaExecutionRole
      # The trust policy that allows AWS Lambda to assume this role.
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com  # Only Lambda can assume this role.
            Action: sts:AssumeRole
      # Inline policies attached to this role.
      Policies:
        - PolicyName: LambdaLoggingPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"  # Grants access to all CloudWatch Logs resources.

  # -------------------------------
  # Lambda Function Resource
  # -------------------------------
  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: snsQLambda  # Name of the Lambda function in AWS.
      Code:
        S3Bucket: jp-lambda-tests         # Your existing S3 bucket where the code is stored.
        S3Key: snsQLambda.zip            # The object key (file name) of your Lambda deployment package.
      Handler: handler.handler              # Entry point in your code (index.js file exporting a function named handler).
      Role: !GetAtt MyLambdaExecutionRole.Arn  # Retrieves the ARN of the execution role defined above.
      Runtime: nodejs18.x                 # Runtime environment for your function.
      Timeout: 10                         # Maximum allowed execution time in seconds.


  LambdaAPIGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: logFromSNSLambdaAPI

  LambdaAPIGatewayResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt LambdaAPIGateway.RootResourceId
      PathPart: reverse
      RestApiId: !Ref LambdaAPIGateway

  LambdaAPIGatewayMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: POST
      ResourceId: !Ref LambdaAPIGatewayResource
      RestApiId: !Ref LambdaAPIGateway
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri:
          Fn::Sub: 
            - "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaFunctionArn}/invocations"
            - LambdaFunctionArn: !GetAtt LambdaFunction.Arn

  LambdaPermissionForAPIGateway:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref LambdaFunction
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Sub:
          - "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiId}/*/*/reverse"
          - ApiId: !Ref LambdaAPIGateway

  LambdaAPIDeployment:
    Type: AWS::ApiGateway::Deployment
    Properties:
      RestApiId: !Ref LambdaAPIGateway
      StageName: default
    DependsOn:
      - LambdaAPIGatewayMethod
      - LambdaAPIGatewayResource